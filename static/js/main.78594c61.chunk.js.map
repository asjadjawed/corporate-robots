{"version":3,"sources":["robots.js","Card.js","CardList.js","Scroll.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","robot","id","name","title","react_default","a","createElement","className","src","concat","slice","alt","CardList","robots","map","src_Card_0","key","Scroll","children","style","height","overflow","border","boxSizing","robotList","i","push","faker","findName","jobTitle","SearchBox","onSearchChange","type","placeholder","textAlign","color","outline","borderRadius","padding","fontSize","fontFamily","background","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","src_SearchBox","src_Scroll","src_CardList_0","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAKA,yFCeeA,eAjBF,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACNC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OACEE,IAAG,wBAAAC,OAA0BN,EAAMO,MAAM,EAAG,GAC1CT,EADC,0BAEHU,IAAI,eAENP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,OCCGS,SAVE,SAAAb,GAAgB,IAAbc,EAAad,EAAbc,OAClB,OACET,EAAAC,EAAAC,cAAA,OAAKL,GAAG,YACLY,EAAOC,IAAI,SAAAd,GAAK,OACfI,EAAAC,EAAAC,cAACS,EAAD,CAAMf,MAAOA,EAAOgB,IAAKhB,EAAMC,UCMxBgB,EAbA,SAAAlB,GAAA,IAAGmB,EAAHnB,EAAGmB,SAAH,OACbd,EAAAC,EAAAC,cAAA,OACEa,MAAO,CACLC,OAAQ,OACRC,SAAU,OACVC,OAAQ,kBACRC,UAAW,eAGZL,oBHRCM,EAAY,GAETC,EAAI,EAAGA,EAJG,GAIaA,IAC9BD,EAAUE,KAAK,CACbzB,GAAIwB,EACJvB,KAAMyB,IAAMzB,KAAK0B,WACjBzB,MAAOwB,IAAMzB,KAAK2B,aAIPL,QISAM,EApBG,SAAA/B,GAAA,IAAGgC,EAAHhC,EAAGgC,eAAH,OAChB3B,EAAAC,EAAAC,cAAA,SACEL,GAAG,YACH+B,KAAK,SACLC,YAAY,oBACZd,MAAO,CACLe,UAAW,SACXC,MAAO,QACPC,QAAS,OACTd,OAAQ,OACRe,aAAc,OACdC,QAAS,OACTC,SAAU,OACVC,WAAU,wBACVC,WAAY,WAEdC,SAAUX,KCiCCY,cA1Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFhB,eAAiB,SAAAoB,GACfP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtCX,EAAKY,MAAQ,CACX3C,OAAQ,GACRwC,YAAa,IAJHT,mFASZG,KAAKK,SAAS,CAAEvC,OAAQW,qCAOjB,IAAAiC,EAAAV,KACP,OACE3C,EAAAC,EAAAC,cAAA,OAAKL,GAAG,OACNG,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,0DAEFF,EAAAC,EAAAC,cAACoD,EAAD,CAAW3B,eAAgBgB,KAAKhB,kBAElC3B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,CACE/C,OAAQkC,KAAKS,MAAM3C,OAAOgD,OAAO,SAAA7D,GAAK,OACpCA,EAAME,KACH4D,cACAC,SAASN,EAAKD,MAAMH,YAAYS,6BAjCjCE,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78594c61.chunk.js","sourcesContent":["import faker from \"faker\";\nconst listLength = 18;\n\nconst robotList = [];\n\nfor (let i = 0; i < listLength; i++) {\n  robotList.push({\n    id: i,\n    name: faker.name.findName(),\n    title: faker.name.jobTitle()\n  });\n}\n\nexport default robotList;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ robot }) => {\n  const { id, name, title } = robot;\n  return (\n    <div className=\"Card\">\n      <img\n        src={`https://robohash.org/${title.slice(0, 3) +\n          id}?set=set3&size=150x150`}\n        alt=\"Corp Drone\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{title}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nimport \"./CardList.css\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div id=\"CardList\">\n      {robots.map(robot => (\n        <Card robot={robot} key={robot.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => (\n  <div\n    style={{\n      height: \"100%\",\n      overflow: \"auto\",\n      border: \"1px solid black\",\n      boxSizing: \"border-box\"\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearchChange }) => (\n  <input\n    id=\"SearchBox\"\n    type=\"search\"\n    placeholder=\"search executives\"\n    style={{\n      textAlign: \"center\",\n      color: \"white\",\n      outline: \"none\",\n      border: \"none\",\n      borderRadius: \"40px\",\n      padding: \"10px\",\n      fontSize: \"1rem\",\n      fontFamily: `\"Sansita\", sans-serif`,\n      background: \"#004050\"\n    }}\n    onChange={onSearchChange}\n  />\n);\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import Logo from \"./Robot.svg\";\nimport CardList from \"./CardList\";\nimport Scroll from \"./Scroll\";\nimport robotList from \"./robots\";\nimport SearchBox from \"./SearchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ robots: robotList });\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    return (\n      <div id=\"App\">\n        <header>\n          <h1>Robo Inc. Team</h1>\n          <p>\n            <em>&ldquo;Only the best corporate robots!&rdquo;</em>\n          </p>\n          <SearchBox onSearchChange={this.onSearchChange} />\n        </header>\n        <main>\n          <Scroll>\n            <CardList\n              robots={this.state.robots.filter(robot =>\n                robot.name\n                  .toLowerCase()\n                  .includes(this.state.searchField.toLowerCase())\n              )}\n            />\n          </Scroll>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./fonts.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}