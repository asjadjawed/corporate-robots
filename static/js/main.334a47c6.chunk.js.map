{"version":3,"sources":["robots.js","components/Modal.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/App.js","serviceWorker.js","index.js"],"names":["Modal","_ref","modalState","modalRobot","hideModal","id","name","title","activity","department","jobDescription","react_default","a","createElement","className","onClick","e","stopPropagation","src","concat","slice","alt","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showModal","setState","state","_this$props$robot","props","robot","src_components_Modal","Component","CardList","robots","map","src_components_Card","key","Scroll","children","style","height","overflow","border","boxSizing","robotList","i","push","faker","findName","jobTitle","company","bs","commerce","hacker","ingverb","catchPhrase","SearchBox","onSearchChange","type","placeholder","textAlign","color","outline","borderRadius","padding","fontSize","fontFamily","background","onChange","App","searchField","target","value","_this2","components_SearchBox","components_Scroll","src_components_CardList","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.334a47c6.chunk.js","sourcesContent":["import faker from \"faker\";\nconst listLength = 18;\n\nconst robotList = [];\n\nfor (let i = 0; i < listLength; i++) {\n  robotList.push({\n    id: i,\n    name: faker.name.findName(),\n    title: faker.name.jobTitle(),\n    activity: faker.company.bs(),\n    department: faker.commerce.department(),\n    jobDescription: `${faker.hacker.ingverb()} ${faker.company.catchPhrase()}`\n  });\n}\n\nexport default robotList;\n","import React from \"react\";\nimport \"./Modal.css\";\n\nconst Modal = ({ modalState, modalRobot, hideModal }) => {\n  const { id, name, title, activity, department, jobDescription } = modalRobot;\n  return (\n    <div id=\"Modal\" className={modalState} onClick={hideModal}>\n      <div className=\"modalContent\" onClick={e => e.stopPropagation()}>\n        <img\n          src={`https://robohash.org/${title.slice(0, 3) +\n            id}?set=set3&size=150x150`}\n          alt=\"Corp Drone\"\n        />\n        <h2>{name}</h2>\n        <p className=\"title\">\n          <em>{title}</em>\n        </p>\n        <p className=\"details\">\n          <strong>Department:</strong> {department}\n          <br />\n          <strong>Department Activity:</strong> {activity}\n          <br />\n          <strong>Job Description: </strong> {jobDescription}\n        </p>\n        <button onClick={hideModal}>Close</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { Component } from \"react\";\nimport Modal from \"./Modal\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  constructor() {\n    super();\n    this.state = {\n      modalState: \"off\"\n    };\n  }\n\n  showModal = e => {\n    e.stopPropagation();\n    this.setState({ modalState: \"on\" });\n  };\n\n  hideModal = e => {\n    e.stopPropagation();\n    this.setState({ modalState: \"off\" });\n  };\n\n  render() {\n    const { id, name, title } = this.props.robot;\n    return (\n      <div>\n        <div className=\"Card\" onClick={this.showModal}>\n          <img\n            src={`https://robohash.org/${title.slice(0, 3) +\n              id}?set=set3&size=150x150`}\n            alt=\"Corp Drone\"\n          />\n          <div>\n            <h2>{name}</h2>\n            <p>{title}</p>\n          </div>\n        </div>\n        <Modal\n          modalState={this.state.modalState}\n          modalRobot={this.props.robot}\n          hideModal={this.hideModal}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nimport \"./CardList.css\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div id=\"CardList\">\n      {robots.map(robot => (\n        <Card robot={robot} key={robot.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => (\n  <div\n    style={{\n      height: \"100%\",\n      overflow: \"auto\",\n      border: \"1px solid black\",\n      boxSizing: \"border-box\"\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearchChange }) => (\n  <input\n    id=\"SearchBox\"\n    type=\"search\"\n    placeholder=\"search executives\"\n    style={{\n      textAlign: \"center\",\n      color: \"white\",\n      outline: \"none\",\n      border: \"none\",\n      borderRadius: \"40px\",\n      padding: \"10px\",\n      fontSize: \"1rem\",\n      fontFamily: `\"Sansita\", sans-serif`,\n      background: \"#004050\"\n    }}\n    onChange={onSearchChange}\n  />\n);\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./CardList\";\nimport Scroll from \"./Scroll\";\nimport robotList from \"../robots\";\nimport SearchBox from \"./SearchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ robots: robotList });\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    return (\n      <div id=\"App\">\n        <header>\n          <h1>Robo Inc. Team</h1>\n          <p>\n            <em>&ldquo;Only the best corporate robots!&rdquo;</em>\n          </p>\n          <SearchBox onSearchChange={this.onSearchChange} />\n        </header>\n        <main>\n          <Scroll>\n            <CardList\n              robots={this.state.robots.filter(robot =>\n                robot.name\n                  .toLowerCase()\n                  .includes(this.state.searchField.toLowerCase())\n              )}\n            />\n          </Scroll>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./fonts.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}