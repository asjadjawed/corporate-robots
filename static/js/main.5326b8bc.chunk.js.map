{"version":3,"sources":["robots.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/Modal.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","robot","showModal","react_default","a","createElement","className","onClick","id","src","concat","title","slice","alt","name","CardList","robots","map","src_components_Card","key","Scroll","children","style","height","overflow","border","boxSizing","robotList","i","push","faker","findName","jobTitle","activity","company","bs","department","commerce","jobDescription","hacker","ingverb","catchPhrase","SearchBox","onSearchChange","type","placeholder","textAlign","color","outline","borderRadius","padding","fontSize","fontFamily","background","onChange","Modal","modalState","selectedRobot","hideModal","e","stopPropagation","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","bind","assertThisInitialized","setState","target","value","selection","parentElement","_this2","components_SearchBox","components_Scroll","src_components_CardList","filter","toLowerCase","includes","src_components_Modal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5326b8bc.chunk.js","sourcesContent":["import faker from \"faker\";\r\nconst listLength = 12;\r\n\r\nconst robotList = [];\r\n\r\nfor (let i = 0; i < listLength; i++) {\r\n  robotList.push({\r\n    id: i,\r\n    name: faker.name.findName(),\r\n    title: faker.name.jobTitle(),\r\n    activity: faker.company.bs(),\r\n    department: faker.commerce.department(),\r\n    jobDescription: `${faker.hacker.ingverb()} ${faker.company.catchPhrase()}`\r\n  });\r\n}\r\n\r\nexport default robotList;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ robot, showModal }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"Card\" onClick={showModal} id={robot.id}>\r\n        <img\r\n          src={`https://robohash.org/${robot.title.slice(0, 3) +\r\n            robot.id}?set=set3&size=150x150`}\r\n          alt=\"Corp Drone\"\r\n        />\r\n\r\n        <h2>{robot.name}</h2>\r\n        <p>{robot.title}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots, showModal }) => {\r\n  return (\r\n    <div id=\"CardList\">\r\n      {robots.map(robot => (\r\n        <Card robot={robot} key={robot.id} showModal={showModal} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => (\r\n  <div\r\n    style={{\r\n      height: \"100%\",\r\n      overflow: \"auto\",\r\n      border: \"1px solid black\",\r\n      boxSizing: \"border-box\"\r\n    }}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearchChange }) => (\r\n  <input\r\n    id=\"SearchBox\"\r\n    type=\"search\"\r\n    placeholder=\"search executives\"\r\n    style={{\r\n      textAlign: \"center\",\r\n      color: \"white\",\r\n      outline: \"none\",\r\n      border: \"none\",\r\n      borderRadius: \"40px\",\r\n      padding: \"10px\",\r\n      fontSize: \"1rem\",\r\n      fontFamily: `\"Sansita\", sans-serif`,\r\n      background: \"#004050\"\r\n    }}\r\n    onChange={onSearchChange}\r\n  />\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nconst Modal = ({ modalState, selectedRobot, hideModal }) => {\r\n  const {\r\n    id,\r\n    name,\r\n    title,\r\n    activity,\r\n    department,\r\n    jobDescription\r\n  } = selectedRobot;\r\n  return (\r\n    <div id=\"Modal\" className={modalState} onClick={hideModal}>\r\n      <div className=\"modalContent\" onClick={e => e.stopPropagation()}>\r\n        <img\r\n          src={`https://robohash.org/${title.slice(0, 3) +\r\n            id}?set=set3&size=150x150`}\r\n          alt=\"Corp Drone\"\r\n        />\r\n        <h2>{name}</h2>\r\n        <p className=\"title\">\r\n          <em>{title}</em>\r\n        </p>\r\n        <p className=\"details\">\r\n          <strong>Department:</strong> {department}\r\n          <br />\r\n          <strong>Department Activity:</strong> {activity}\r\n          <br />\r\n          <strong>Job Description: </strong> {jobDescription}\r\n        </p>\r\n        <button onClick={hideModal}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport robotList from \"../robots\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Modal from \"../components/Modal\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n      modalState: \"off\",\r\n      selectedRobot: {\r\n        id: \"\",\r\n        name: \"\",\r\n        title: \"\",\r\n        activity: \"\",\r\n        department: \"\",\r\n        jobDescription: \"\"\r\n      }\r\n    };\r\n    this.onSearchChange = this.onSearchChange.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ robots: robotList });\r\n  }\r\n\r\n  onSearchChange(e) {\r\n    this.setState({ searchField: e.target.value });\r\n  }\r\n\r\n  showModal(e) {\r\n    e.stopPropagation();\r\n    let selection =\r\n      e.target.id !== \"\" ? e.target.id : e.target.parentElement.id;\r\n    this.setState({\r\n      modalState: \"on\",\r\n      selectedRobot: this.state.robots[selection]\r\n    });\r\n  }\r\n\r\n  hideModal(e) {\r\n    e.stopPropagation();\r\n    this.setState({ modalState: \"off\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"App\">\r\n        <header>\r\n          <h1>Robo Inc. Team</h1>\r\n          <p>\r\n            <em>&ldquo;Only the best corporate robots!&rdquo;</em>\r\n          </p>\r\n          <SearchBox onSearchChange={this.onSearchChange} />\r\n        </header>\r\n        <main>\r\n          <Scroll>\r\n            <CardList\r\n              robots={this.state.robots.filter(robot =>\r\n                robot.name\r\n                  .toLowerCase()\r\n                  .includes(this.state.searchField.toLowerCase())\r\n              )}\r\n              showModal={this.showModal}\r\n            />\r\n          </Scroll>\r\n        </main>\r\n        <Modal\r\n          modalState={this.state.modalState}\r\n          selectedRobot={this.state.selectedRobot}\r\n          hideModal={this.hideModal}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./fonts.css\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}